from asyncio.windows_events import NULL
from cgitb import text
from datetime import datetime
import logging
from multiprocessing import context
import os
import logging
import types
from array import *
from pydoc import describe
from unicodedata import category
from venv import create
from numpy import NaN
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ReplyMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters, ConversationHandler
import sqlite3
import datetime
import json
import functions as fs

con = sqlite3.connect('Amiko.db', check_same_thread=False)
cur=con.cursor()

reply_keyboard = [['/create', '/review'], ['/update']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
    
def start (bot, update):
    user_id = bot.message.from_user.id
    num=bot.message.from_user.username
    fs.addUser(user_id, num)
    bot.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç–∏–∫, {bot.effective_user.first_name}, —è —Ç—Ä–µ–π–¥ –ë–æ—Ç –ê–º–∏–∫–æ! –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–∞–Ω–µ–ª—å –≤ –º–µ–Ω—é, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ä—É—á–∫–∞–º–∏ "–°–æ–∑–¥–∞—Ç—å" –∏–ª–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"', reply_markup=markup)

def review (bot, context: CallbackContext):
    reply_keyboards = [['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ üì±', '–ò–≥—Ä—É—à–∫–∏ üß∏','–ñ–∏–≤–æ—Ç–Ω—ã–µ üê∂'], ['–î—Ä—É–≥–æ–µ ü§î']]
    markup = ReplyKeyboardMarkup(reply_keyboards, one_time_keyboard=False, resize_keyboard=False)
    bot.message.reply_text("–°–ø–µ—Ä–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—ç–≥, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=markup)
    return 1
    
    
def showRes(bot, context: CallbackContext):
    tag=bot.message.text
    check=fs.tagCheck(tag)
    if(check is not None):
        bot.message.reply_text(check)
        return 1
    reply_keyboard = [['/create', '/review'], ['/update']]
    tag=bot.message.text
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
    user_id = bot.message.from_user.id
    for value in cur.execute("SELECT Name, PhotoId, Description,UserId, U.Username FROM Offers JOIN Users U on U.IdUser=Offers.UserId WHERE UserId != ? AND Tag=?", (user_id,tag,)) :
        # for value2 in cur.execute("SELECT Username FROM Users WHERE IdUser=?", (value[3],)) :

        bot.message.reply_photo(value[1], caption = value[0] +'\n' + '\n'+value[2] +'\n'+'\n'+"–°–æ–∑–¥–∞—Ç–µ–ª—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è: "+'@'+value[4])
    bot.message.reply_text("–ü–µ—Ä–µ–¥ –í–∞–º–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π!",reply_markup=markup)
    return ConversationHandler.END

#  bot.message.reply_photo(value[1], caption = value[0] +'\n' + '\n'+value[2] +'\n' + '\n'+"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: "+'@'+value2[0])       
def update(update, context: CallbackContext):
    user_id = update.message.from_user.id
    if (cur.execute("SELECT Name, PhotoId, Description FROM Offers WHERE UserId = ?", (user_id,)).fetchone() is None) :
        reply_keyboard = [['/create', '/review'], ['/update']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
        update.message.reply_text(f'–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!',reply_markup=markup)
        return ConversationHandler.END
    
    # for value in cur.execute("SELECT Name, PhotoId, Description FROM Offers WHERE UserId = ?", (user_id,)) :
    #     markupp = InlineKeyboardMarkup([[InlineKeyboardButton("–¢—ã–∫–Ω–∏ –º–µ–Ω—è!",'https://vk.com/feed'),InlineKeyboardButton("–ò —Å–Ω–æ–≤–∞!!!",'https://vk.com/feed')]])
    #     update.message.reply_photo(value[1], caption = value[0] +'\n' + '\n'+value[2],reply_markup = markupp)
    update.message.reply_text(
        '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–û—Ç–ø—Ä–∞–≤—å —Ü–∏—Ñ—Ä—É!)',
        reply_markup=ReplyKeyboardRemove(),
    )

    update.message.reply_text(fs.showUrOff(user_id))
    return 1

def choosedOffer(bot, context: CallbackContext):
    user_id = bot.message.from_user.id
    user_message = bot.message.text
    if (user_message.isdigit()==False):
        bot.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É!")
        return 1
    counter=0;
    for value in cur.execute("SELECT * FROM Offers WHERE UserId = ?", (user_id,)) :
        counter=counter+1;
        if (counter>=int(user_message)) : 
            bot.message.reply_text("–¢–∞–∫–æ–π –ó–∞–∫–∞–∑ –ï—Å—Ç—å!")
            reply_keyboard = [['–ù–∞–∑–≤–∞–Ω–∏–µ', '–§–æ—Ç–æ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¢—ç–≥'], ['–£–¥–∞–ª–∏—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏–µ'],['–ù–∞–∑–∞–¥']]
            markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
            bot.message.reply_photo(value[2], caption = value[1] +'\n' + '\n'+value[3] +'\n'+ '\n'+'–¢—ç–≥: '+value[5],reply_markup = markup)
            bot.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤ –∑–∞—è–≤–∫–µ (–ò–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ—ë)")
            cur.execute("DELETE FROM Buffer WHERE UserId=?",(user_id,))
            cur.execute("INSERT INTO Buffer (UserID, Name, PhotoId, Descr, DateTime, Tag) VALUES(?,?,?,?,?,?)", (value[0],value[1],value[2],value[3],value[4],value[5]))
            con.commit();
            return 2
  
    bot.message.reply_text("–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    return 1

def pathOffer(bot, context: CallbackContext):
    if (bot.message.text=="–ù–∞–∑–≤–∞–Ω–∏–µ"):
        bot.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!", reply_markup=ReplyKeyboardRemove())
        return 3
    if (bot.message.text=="–§–æ—Ç–æ"):
        bot.message.reply_text("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ!",reply_markup=ReplyKeyboardRemove(),)
        return 4
    if (bot.message.text=="–û–ø–∏—Å–∞–Ω–∏–µ"):
        bot.message.reply_text("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!",reply_markup=ReplyKeyboardRemove(),)
        return 5
    if (bot.message.text=="–¢—ç–≥"):
        reply_keyboards = [['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ üì±', '–ò–≥—Ä—É—à–∫–∏ üß∏','–ñ–∏–≤–æ—Ç–Ω—ã–µ üê∂'], ['–î—Ä—É–≥–æ–µ ü§î']]
        markup = ReplyKeyboardMarkup(reply_keyboards, one_time_keyboard=False, resize_keyboard=False)
        bot.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç—ç–≥ —Ç–æ–≤–∞—Ä–∞',reply_markup=markup)
        return 6
    if(bot.message.text=="–£–¥–∞–ª–∏—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏–µ"):
        reply_keyboards = [["–î–∞","–ù–µ—Ç"]]
        markup = ReplyKeyboardMarkup(reply_keyboards, one_time_keyboard=False, resize_keyboard=False)
        bot.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",reply_markup=markup)
        return 7
    if(bot.message.text=="–ù–∞–∑–∞–¥"):
        reply_keyboard = [['/create', '/review'], ['/update']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
        bot.message.reply_text("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!",reply_markup = markup)
        return ConversationHandler.END
        
        
    bot.message.reply_text("–≠–π, –ø–æ–ª—å–∑—É–π—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π!")
    return 2
    
def nameUpdate(bot, context: CallbackContext):
    user_id=bot.message.from_user.id
    answer=bot.message.text
    for value in cur.execute("SELECT * FROM Offers WHERE UserId =?;", (user_id,)) :
        if (answer.lower()==value[1].lower()):
            bot.message.reply_text("–£ –≤–∞—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ")
            return 3
    update=fs.updateOff(user_id,"name", answer)
    reply_keyboard = [['–ù–∞–∑–≤–∞–Ω–∏–µ', '–§–æ—Ç–æ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¢—ç–≥'], ['–£–¥–∞–ª–∏—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏–µ'],['–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
    bot.message.reply_text(update[0],reply_markup = markup)
    bot.message.reply_photo(update[1][0], caption = update[1][1])
    return 2

def photoUpdate(bot, context: CallbackContext):
    user_id=bot.message.from_user.id
    answer=bot.message.photo[0].file_id
    
    update=fs.updateOff(user_id,"photo", answer)
    reply_keyboard = [['–ù–∞–∑–≤–∞–Ω–∏–µ', '–§–æ—Ç–æ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¢—ç–≥'], ['–£–¥–∞–ª–∏—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏–µ'],['–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
    bot.message.reply_text(update[0],reply_markup = markup)
    bot.message.reply_photo(update[1][0], caption = update[1][1])

    return 2
    
def descrUpdate(bot, context: CallbackContext):
    user_id=bot.message.from_user.id
    answer=bot.message.text

    update=fs.updateOff(user_id,"descr", answer)
    reply_keyboard = [['–ù–∞–∑–≤–∞–Ω–∏–µ', '–§–æ—Ç–æ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¢—ç–≥'], ['–£–¥–∞–ª–∏—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏–µ'],['–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
    bot.message.reply_text(update[0],reply_markup = markup)
    bot.message.reply_photo(update[1][0], caption = update[1][1])
    return 2
    
def tagUpdate(bot, context: CallbackContext):
    tag=bot.message.text
    check=fs.tagCheck(tag)
    if(check is not None):
        bot.message.reply_text(check)
        return 6
    user_id=bot.message.from_user.id
    answer=bot.message.text
    update=fs.updateOff(user_id,"tag", answer)
    reply_keyboard = [['–ù–∞–∑–≤–∞–Ω–∏–µ', '–§–æ—Ç–æ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¢—ç–≥'], ['–£–¥–∞–ª–∏—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏–µ'],['–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
    bot.message.reply_text(update[0],reply_markup = markup)
    bot.message.reply_photo(update[1][0], caption = update[1][1])
    return 2

def deleteOffer(bot,context: CallbackContext):
    if (bot.message.text=="–î–∞") :
        user_id=bot.message.from_user.id
        for value in cur.execute("SELECT * FROM Buffer WHERE UserId=?", (user_id,)) :
            cur.execute("DELETE FROM Offers WHERE UserId=? AND Name=? AND PhotoId=? AND Description=? AND DateTime=?",(value[0],value[1],value[2],value[3],value[4]))
            con.commit()
        cur.execute("DELETE FROM Buffer WHERE UserId=?", (user_id,))
        con.commit()
        reply_keyboard = [['/create', '/review'], ['/update']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
        bot.message.reply_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",reply_markup = markup)
        return ConversationHandler.END
    if (bot.message.text=="–ù–µ—Ç") :
        reply_keyboard = [['–ù–∞–∑–≤–∞–Ω–∏–µ', '–§–æ—Ç–æ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¢—ç–≥'], ['–£–¥–∞–ª–∏—Ç—å –û–±—ä—è–≤–ª–µ–Ω–∏–µ'],['–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=False)
        bot.message.reply_text("–ñ–µ–ª–∞–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë –≤ —ç—Ç–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏?",reply_markup = markup)
        return 2
    bot.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!")
    return 7
        
    
def create(update, context: CallbackContext):
    update.message.reply_text(
        '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        reply_markup=ReplyKeyboardRemove(),
    )
    return 1

def naming(update, context: CallbackContext):
    user_id=update.message.from_user.id
    answer=update.message.text
    for value in cur.execute("SELECT * FROM Offers WHERE UserId =?;", (user_id,)) :
        if (answer.lower()==value[1].lower()):
            update.message.reply_text("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ")
            return 1
    date = datetime.datetime.now()
    cur.execute("INSERT INTO Offers (UserId, Name,DateTime) VALUES(?,?,?)",(user_id, answer, date))
    update.message.reply_text(
        '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –í–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞',
    )
    return 2
def photo(bot, update):
    idPhoto=bot.message.photo[0].file_id
    user_id=bot.message.from_user.id
    cur.execute(f'UPDATE Offers SET PhotoId=? WHERE UserId=? AND DateTime=(SELECT MAX(DateTime) FROM Offers WHERE UserId=?)',(idPhoto, user_id, user_id))
    # bot.message.reply_photo(idPhoto)
    bot.message.reply_text(
        '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—á—Ç–∏ —Å–æ–∑–¥–∞–Ω–æ, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –í–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞',
    ) 
    return 3

def rename(bot,update):
    bot.message.reply_text('–í—ã —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ')
    return 1


    
def desc(bot, update):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    desc = bot.message.text
    user_id=bot.message.from_user.id
    cur.execute(f'UPDATE Offers SET Description=? WHERE UserId=? AND DateTime=(SELECT MAX(DateTime) FROM Offers WHERE UserId=?)',(desc, user_id, user_id))
    reply_keyboards = [['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ üì±', '–ò–≥—Ä—É—à–∫–∏ üß∏','–ñ–∏–≤–æ—Ç–Ω—ã–µ üê∂'], ['–î—Ä—É–≥–æ–µ ü§î']]
    markup = ReplyKeyboardMarkup(reply_keyboards, one_time_keyboard=False, resize_keyboard=False)
    bot.message.reply_text('–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—ç–≥ —Ç–æ–≤–∞—Ä–∞',reply_markup=markup)
    return 5

def tag(bot,update):
    tag=bot.message.text
    check=fs.tagCheck(tag)
    if(check is not None):
        bot.message.reply_text(check)
        return 5
    tag=bot.message.text
    user_id=bot.message.from_user.id
    cur.execute(f'UPDATE Offers SET Tag=? WHERE UserId=? AND DateTime=(SELECT MAX(DateTime) FROM Offers WHERE UserId=?)',(tag, user_id, user_id))
    con.commit()
    bot.message.reply_text(f'–û—Ç–ª–∏—á–Ω–æ, —É –í–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ—Ç —Ç–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', reply_markup=markup)
    for value in cur.execute("SELECT UserId, Name, PhotoId, Description, Tag FROM Offers WHERE UserId=? AND DateTime=(SELECT MAX(DateTime) FROM Offers WHERE UserId=?)",(user_id, user_id)) :
        print(value[1])
        bot.message.reply_photo(value[2], caption = value[1] +'\n' + '\n'+value[3] +'\n'+ '\n'+'–¢—ç–≥: '+value[4])
    return ConversationHandler.END



def cancel (update, context: CallbackContext):
    update.message.reply_text(f'–ö–∞–∫ —Å–∫–∞–∂–µ—Ç–µ, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup)
    return ConversationHandler.END

conv_handler = ConversationHandler( # –∑–¥–µ—Å—å —Å—Ç—Ä–æ–∏—Ç—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        # —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
        entry_points=[CommandHandler('create', create)],
        # —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –∫–∞–∂–¥—ã–π —Å–æ —Å–≤–æ–∏–º —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        states={
           1: [MessageHandler(Filters.text, naming, pass_user_data=True)],
           2: [MessageHandler(Filters.photo, photo, pass_user_data=True)],
           3: [MessageHandler(Filters.text, desc, pass_user_data=True)],
           4: [MessageHandler(Filters.text, rename,pass_user_data=True)],
           5: [MessageHandler(Filters.text, tag,pass_user_data=True)],
        },
        # —Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        fallbacks=[CommandHandler('cancel', cancel)],
    )
conv_handler2 = ConversationHandler(
    entry_points=[CommandHandler('update', update)],
    states={
           1: [MessageHandler(Filters.text, choosedOffer, pass_user_data=True)],
           2: [MessageHandler(Filters.text, pathOffer, pass_user_data=True)],
           3: [MessageHandler(Filters.text, nameUpdate, pass_user_data=True)],
           4: [MessageHandler(Filters.photo, photoUpdate, pass_user_data=True)],
           5: [MessageHandler(Filters.text, descrUpdate, pass_user_data=True)],
           6: [MessageHandler(Filters.text, tagUpdate, pass_user_data=True)],
           7: [MessageHandler(Filters.text, deleteOffer, pass_user_data=True)],
        },
    fallbacks=[CommandHandler('cancel', cancel)],
)
conv_handler3 = ConversationHandler(
        entry_points=[CommandHandler('review', review)],
    states={
           1: [MessageHandler(Filters.text, showRes, pass_user_data=True)],
        },
    fallbacks=[CommandHandler('cancel', cancel)],
)
        
def hello(update, context: CallbackContext) -> None:
    update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç–∏–∫ {update.effective_user.first_name}')

def ping(update, context: CallbackContext) :
    update.message.reply_text(f'Pong')
    print("Pong")
    
updater = Updater('YourToken')

dp = updater.dispatcher

dp.add_handler(conv_handler)
dp.add_handler(conv_handler2)
dp.add_handler(conv_handler3)
dp.add_handler(CommandHandler('hello', hello))
dp.add_handler(CommandHandler('start', start))
dp.add_handler(CommandHandler('ping', ping))

# text_handler = MessageHandler (Filters.text, echo)
# dp.add_handler(text_handler)

updater.start_polling()
updater.idle()
con.close()

